package com.futura.Purple.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.futura.Purple.Auth.payload.response.MessageResponse;
import com.futura.Purple.Auth.repository.UserRepository;
import com.futura.Purple.Entity.DeathClaimTransactionPas;
import com.futura.Purple.Error.ErrorService;
import com.futura.Purple.Repository.DeathClaimTransactionPasRepository;
import com.futura.Purple.Repository.PermissionRepository;
import com.futura.Purple.Service.DeathClaimTransactionPasService;

@RestController
@RequestMapping("/deathClaimTransactionPas")
public class DeathClaimTransactionPasController {

	@Autowired
	private PermissionRepository permissionRepo;

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private ErrorService errorService;
	
	@Autowired
	private DeathClaimTransactionPasRepository deathClaimTransRepo;
	
	@Autowired
	private DeathClaimTransactionPasService deathClaimTransService;
	
	long serviceId = 34;
	
	@GetMapping("/getAll/{userId}")
	public ResponseEntity<?> viewAll(@PathVariable Long userId) {
		String method = "get-all-deathClaimTransPas";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.getAll());
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.getAll());
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@GetMapping("/getAllPOlicyNo")
	public ResponseEntity<List<?>> getAllPolicyNo() {
		return ResponseEntity.ok(deathClaimTransService.getAllPolicyNo());
	}

	@GetMapping("/getByPolicyNo/{uinNumber}")
	public DeathClaimTransactionPas findByUinNumber(@PathVariable String uinNumber) {
		return deathClaimTransService.findByUinNumber(uinNumber);
	}

	@GetMapping("/getProcessedByPolicyNo/{policyNo}")
	public DeathClaimTransactionPas findProcessedByPolicyNo(@PathVariable Long policyNo) {
		return deathClaimTransService.findProcessedByPolicy(policyNo);
	}

	@GetMapping("/{id}/{userId}")
	public ResponseEntity<?> view(@PathVariable Long id, @PathVariable Long userId) {

		String method = "get-deathClaimTransPas";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.getById(id));
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.getById(id));
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@PostMapping("/add/{userId}")
	public ResponseEntity<?> add(@RequestBody DeathClaimTransactionPas entity, @PathVariable Long userId) {

		String method = "add-deathClaimTransPas";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		Long val =deathClaimTransRepo.existsByTransNo(entity.getTransNo());
		if (val>0) {
			return ResponseEntity.badRequest().body(new MessageResponse("Client Number already exists"));
		} else {

			if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
				return ResponseEntity.ok(deathClaimTransService.add(entity));
			} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
				return ResponseEntity.ok(deathClaimTransService.add(entity));
			} else {
				return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
			}

		}

	}

	@PatchMapping("/update/{id}/{userId}")
	public ResponseEntity<?> update(@RequestBody DeathClaimTransactionPas entity, @PathVariable Long id,
			@PathVariable Long userId) {

		String method = "update-deathClaimTransPas";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.update(id, entity));
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.update(id, entity));
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@GetMapping("/search/{val}")
	public List<DeathClaimTransactionPas> search(@PathVariable String val) {
		return deathClaimTransService.search(val);
	}

	@DeleteMapping("/hardDelete/{id}/{userId}")
	public ResponseEntity<?> hardDelete(@PathVariable Long id, @PathVariable Long userId) {

		String method = "hard-delete-deathClaimTransPas";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.hardDelete(id));
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.hardDelete(id));
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@PatchMapping("/softdelete/{id}/{userId}")
	public ResponseEntity<?> softDelete(@PathVariable Long id, @PathVariable Long userId) {

		String method = "soft-delete-deathClaimTransPas";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.deactivate(id));
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimTransService.deactivate(id));
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}
	
}
