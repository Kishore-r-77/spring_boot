package com.futura.Purple.Controller;

import java.text.ParseException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.futura.Purple.Auth.repository.UserRepository;
import com.futura.Purple.Entity.DeathClaimLeapDetails;
import com.futura.Purple.Error.ErrorService;
import com.futura.Purple.Repository.PermissionRepository;
import com.futura.Purple.Service.DeathClaimLeapDetailsService;

@RestController
@RequestMapping("/deathClaimLeap")
public class DeathClaimLeapDetailsController {

	@Autowired
	private DeathClaimLeapDetailsService deathClaimService;

	@Autowired
	private PermissionRepository permissionRepo;

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private ErrorService errorService;

	long serviceId = 35;

	@GetMapping("/getAll/{userId}")
	public ResponseEntity<?> viewAll(@PathVariable Long userId) {
		String method = "get-all-deathClaimLeap";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getAll());
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getAll());
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}
	}

	@GetMapping("/getAllQCPending/{userId}")
	public ResponseEntity<?> getAllQCPending(@PathVariable Long userId) {
		String method = "get-all-deathClaimLeap";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getAllQCPending());
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getAllQCPending());
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}
	}

	@GetMapping("/getAllFailed/{userId}")
	public ResponseEntity<?> viewAllfailed(@PathVariable Long userId) {
		String method = "get-all-deathClaimLeap";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getAllFailed());
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getAllFailed());
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@GetMapping("/getAllPassed/{userId}")
	public ResponseEntity<?> viewAllPassed(@PathVariable Long userId) {
		String method = "get-all-deathClaimLeap";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getAllPassed());
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getAllPassed());
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@GetMapping("/{id}/{userId}")
	public ResponseEntity<?> view(@PathVariable Long id, @PathVariable Long userId) {

		String method = "get-deathClaimLeap";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getById(id));
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.getById(id));
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@PatchMapping("/update/{id}/{userId}")
	public ResponseEntity<?> update(@RequestBody DeathClaimLeapDetails entity, @PathVariable Long id,
			@PathVariable Long userId) {

		String method = "update-deathClaimLeap";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.update(id, entity));
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.update(id, entity));
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@PatchMapping("/softdelete/{id}/{userId}")
	public ResponseEntity<?> softDelete(@PathVariable Long id, @PathVariable Long userId) {

		String method = "soft-delete-deathClaimLeap";
		long userGroupId = userRepo.getById(userId).getUserGroupId();

		if (!permissionRepo.isMethodPresent(userGroupId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.deactivate(id));
		} else if (!permissionRepo.isMethodPresentUser(userId, serviceId, method).isEmpty()) {
			return ResponseEntity.ok(deathClaimService.deactivate(id));
		} else {
			return ResponseEntity.badRequest().body(errorService.getErrorById("ER007"));
		}

	}

	@GetMapping("/getByPolicyNo/{policyNo}")
	public ResponseEntity<DeathClaimLeapDetails> getByPolicyNo(@PathVariable Long policyNo) {
		return new ResponseEntity<>(deathClaimService.getByPolicyNo(policyNo), HttpStatus.OK);
	}

	@GetMapping("/getNextDayDate/{date}")
	public ResponseEntity<?> getNextDayDate(@PathVariable String date) {
		return new ResponseEntity<>(deathClaimService.getIncreaseYearByOneDay(date), HttpStatus.OK);
	}

	@GetMapping("/getDate/{date}")
	public ResponseEntity<?> getDate(@PathVariable String date) throws ParseException {
		return new ResponseEntity<>(deathClaimService.getDateFormat(date), HttpStatus.OK);
	}

	@GetMapping("/getDateDiff/{startDate}/{endDate}")
	public ResponseEntity<?> getDateDiff(@PathVariable String startDate, @PathVariable String endDate)
			throws ParseException {
		return new ResponseEntity<>(deathClaimService.getDiffInYear(endDate, startDate), HttpStatus.OK);
	}

	@GetMapping("/getValue/{uinNumber}")
	public ResponseEntity<?> getValue(@PathVariable String uinNumber) throws ParseException {
		return new ResponseEntity<>(deathClaimService.getValue(uinNumber), HttpStatus.OK);
	}

	@PostMapping(value = "/assignSingleTrans/{uinNumber}/{userId}")
	public ResponseEntity<?> assignSingleTrans(@PathVariable String uinNumber, @PathVariable Long userId) {
		return ResponseEntity.ok(deathClaimService.assignSingleTrans(uinNumber, userId));
	}

	@PostMapping(value = "/assignMultipleTrans/{userId}")
	public ResponseEntity<?> assignMultipleTrans(@RequestBody List<String> uinNumbers, @PathVariable Long userId) {
		return ResponseEntity.ok(deathClaimService.assignMultipleTrans(uinNumbers, userId));
	}

}
